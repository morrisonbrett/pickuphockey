@using Microsoft.AspNet.Identity
@using pickuphockey.Models
@model IEnumerable<BuySell>
@{
    var isAdmin = User.IsInRole("Admin");
    var isSubAdmin = User.IsInRole("SubAdmin");

    // https://www.paypal.com/us/smarthelp/article/how-do-i-add-paypal-checkout-to-my-custom-shopping-cart-ts1200
    var PayPalUrl = "https://www.paypal.com/cgi-bin/webscr";
    if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("localhost")) {
        PayPalUrl = "https://www.sandbox.paypal.com/cgi-bin/webscr";
    }


    // https://gabeoleary.com/posts/venmo-deeplinking-including-from-web-apps
    var VenmoUrl = "https://venmo.com";
}
<h2>Buys / Sells</h2>

<table class="table">
    <tr>
        <th>
            Action
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SellerNote)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.BuyerNote)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TeamAssignment)
        </th>
        <th>
            Payment
        </th>
        <th>
            Action
        </th>
    </tr>

@foreach (var item in Model)
{
    var buyerName = "TBD";
    var sellerName = "TBD";
    var sellingVerb = "SELLING TO";

    if (!string.IsNullOrEmpty(item.SellerUserId))
    {
        sellerName = item.SellerUser.FirstName + " " + item.SellerUser.LastName;
        if (isAdmin || isSubAdmin)
        {
            sellerName += " (" + string.Format("{0:0.0}", item.SellerUser.Rating) + ")";
        }
    }

    if (!string.IsNullOrEmpty(item.BuyerUserId))
    {
        buyerName = item.BuyerUser.FirstName + " " + item.BuyerUser.LastName;
        if (isAdmin || isSubAdmin)
        {
            buyerName += " (" + string.Format("{0:0.0}", item.BuyerUser.Rating) + ")";
        }
    }

    if (!string.IsNullOrEmpty(item.SellerUserId) && !string.IsNullOrEmpty(item.BuyerUserId))
    {
        sellingVerb = "SOLD TO";
    }
    <tr>
        <td>
            @sellerName @sellingVerb @buyerName
        </td>
        <td>
            @if (isAdmin)
            {
                if (item.SellerNote != null && item.SellerNote.Length > 0)
                {
                    <span>Flag:</span>@Html.CheckBoxFor(modelItem => item.SellerNoteFlagged, htmlAttributes: new { id = "SellerNoteFlagged_" + item.BuySellId })
                    <br />
                }
                @Html.DisplayFor(modelItem => item.SellerNote)
            } else if (!item.SellerNoteFlagged)
            {
                @Html.DisplayFor(modelItem => item.SellerNote)
            }
        </td>
        <td>
            @if (isAdmin)
            {
                if (item.BuyerNote != null && item.BuyerNote.Length > 0)
                {
                    <span>Flag:</span>@Html.CheckBoxFor(modelItem => item.BuyerNoteFlagged, htmlAttributes: new { id = "BuyerNoteFlagged_" + item.BuySellId })
                    <br />
                }
                @Html.DisplayFor(modelItem => item.BuyerNote)
            }
            else if (!item.BuyerNoteFlagged)
            {
                @Html.DisplayFor(modelItem => item.BuyerNote)
            }
        </td>
        <td>
            @if (isAdmin && !item.Session.IsPast)
            {
                @Html.EnumDropDownListFor(modelItem => item.TeamAssignment, htmlAttributes: new { id = "TeamAssignment_" + item.BuySellId, @class = "form-control" })
            }
            else
            {
                @Html.DisplayFor(modelItem => item.TeamAssignment)
            }
            </td>
        <td>
            @if (!string.IsNullOrEmpty(item.SellerUserId) && !string.IsNullOrEmpty(item.BuyerUserId) && item.BuyerUserId == User.Identity.GetUserId() && !item.PaymentSent)
            {
                <div>
                    <form action="@PayPalUrl" method="post" target="_top">
                        <input type="hidden" name="cmd" value="_xclick">
                        <input type="hidden" name="business" value="@item.SellerUser.PayPalEmail">
                        <input type="hidden" name="lc" value="US">
                        <input type="hidden" name="item_name" value="@System.Configuration.ConfigurationManager.AppSettings["SiteTitle"] - @item.Session.SessionDate.ToString("dddd, MM/dd/yyyy, HH:mm")">
                        <input type="hidden" name="amount" value="@System.Configuration.ConfigurationManager.AppSettings["SessionBuyPrice"]">
                        <input type="hidden" name="currency_code" value="USD">
                        <input type="hidden" name="button_subtype" value="services">
                        <input type="hidden" name="no_note" value="0">
                        <input type="hidden" name="tax_rate" value="0.000">
                        <input type="hidden" name="shipping" value="0.00">
                        <input type="hidden" name="bn" value="PP-BuyNowBF:btn_paynow_SM.gif:NonHostedGuest">
                        <input type="hidden" name="return" value="@HttpContext.Current.Request.Url.AbsoluteUri">
                        <input type="hidden" name="cancel_return" value="@HttpContext.Current.Request.Url.AbsoluteUri">
                        <input type="image" src="~/Content/paypal.png" width="150" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
                        <img alt="" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
                    </form>
                </div>
                if (!string.IsNullOrEmpty(item.SellerUser.VenmoAccount))
                {
                    <div>
                        <form action="@VenmoUrl/@item.SellerUser.VenmoAccount" method="get" target="_blank">
                            <input type="hidden" name="txn" value="pay">
                            <input type="hidden" name="note" value="@System.Configuration.ConfigurationManager.AppSettings["SiteTitle"] - @item.Session.SessionDate.ToString("dddd, MM/dd/yyyy, HH:mm")">
                            <input type="hidden" name="amount" value="@System.Configuration.ConfigurationManager.AppSettings["SessionBuyPrice"]">
                            <input type="image" src="~/Content/venmo.png" width="150" border="0" name="submit" alt="Venmo - Fast, safe, social payments">
                            @if (!string.IsNullOrEmpty(item.SellerUser.MobileLast4)) {
                                <div style="margin-left:30px;margin-top:-7px">
                                    <span style="color:royalblue">@string.Format("Last 4: " + @item.SellerUser.MobileLast4)</span>
                                </div>
                            }
                        </form>
                    </div>
                }
            }
            @if (!string.IsNullOrEmpty(item.BuyerUserId) && !string.IsNullOrEmpty(item.SellerUserId))
            {
                var canModifySent = (item.BuyerUserId == User.Identity.GetUserId()) || isAdmin;
                var canModifyReceived = (item.SellerUserId == User.Identity.GetUserId()) || isAdmin;

                <div>
                    @(canModifySent ? Html.CheckBoxFor(modelItem => item.PaymentSent, htmlAttributes: new { id = "PaymentSent_" + item.BuySellId }) : Html.CheckBoxFor(modelItem => item.PaymentSent, htmlAttributes: new { id = "PaymentSent_" + item.BuySellId, disabled = "disabled" }))
                    <span>Sent</span>
                    <br />
                    @(canModifyReceived ? Html.CheckBoxFor(modelItem => item.PaymentReceived, htmlAttributes: new { id = "PaymentReceived_" + item.BuySellId }) : Html.CheckBoxFor(modelItem => item.PaymentReceived, htmlAttributes: new { id = "PaymentReceived_" + item.BuySellId, disabled = "disabled" }))
                    <span>Received</span>
                </div>
            }
        </td>
        <td>
            @{
                if (!item.Session.IsPast)
                {
                    var canRemoveSeller = !string.IsNullOrEmpty(item.SellerUserId) && (string.IsNullOrEmpty(item.BuyerUserId) || isAdmin) && ((item.SellerUserId == User.Identity.GetUserId()) || isAdmin);
                    var canRemoveBuyer = !string.IsNullOrEmpty(item.BuyerUserId) && (string.IsNullOrEmpty(item.SellerUserId) || isAdmin)  && ((item.BuyerUserId == User.Identity.GetUserId()) || isAdmin);
                    
                    if (canRemoveSeller)
                    {
                        @Html.ActionLink("Remove Seller Spot", "RemoveSeller", "BuySells", new { id = item.BuySellId }, null)
                    }
                    if (canRemoveSeller && canRemoveBuyer)
                    {
                        <br/>
                    }
                    if (canRemoveBuyer)
                    {
                        @Html.ActionLink("Remove Buyer Spot", "RemoveBuyer", "BuySells", new { id = item.BuySellId }, null)
                    }
                }
            }
        </td>
    </tr>
}

</table>
